#!/usr/bin/env node

var debug = require('debug')('cupireservas');
var db = require("../models");
var Promise = require('bluebird');
var fs = require("fs");
var joe = require("../worker/java-object-extractor");
var jor = require("../worker/java-object-replacer");

generateData();

function generateData() {
    var examenCreated;
    return db.sequelize.sync({
        force: true
    }).then(function(){
        return new Promise(function(resolve, reject){
            fs.readFile("./worker/Marca.java", function(err, buffer) {
                if (err) return reject(err);

                codigoSolucion = buffer.toString();
                fragmentos = joe.obtenerObjetos(codigoSolucion);

                db.CodigoSolucion.upsert({
                    id: 1,
                    codigo: codigoSolucion
                }).then(function(wasInserted){
                    fragmentos.forEach(function(fragmento){
                        fragmento.CodigoSolucionId = 1;
                    });
                    console.log("insertOrUpdate:", wasInserted);
                    if(wasInserted){
                        return db.FragmentoCodigo.bulkCreate(fragmentos).catch(function(){
                            console.log("Los fragmentos de c칩digo ya est치n en la base de datos");
                        });
                    }
                }).then(function(){
                    resolve();
                });
            });
        });
    }).then(function() {
        return db.Examen.create({
            nombre: "Examen 1",
            enunciado: "Enunciado 1",
            modeloMundo: "http://i.imgur.com/06cMtIA.png",
            descripcion: "Este es el examen 1"
        });
    }).then(function(examenCreatedP) {
        examenCreated = examenCreatedP;
        var promises = [];
        for (var i = 1; i <= 5; i++) {
            promises.push(examenCreated.createPregunta({
                enunciado: "Enunciado pregunta " + i,
                esqueleto: "Esqueleto Pregunta " + i,
                FragmentoCodigoId: 1
            }, {
                peso: 20,
                numero: i
            }));
        }
        return Promise.all(promises);
    }).then(function() {
		//Retorna las preguntas del ex치men sin tener que buscar el ex치men en la base de datos.
		// Para ello crea una instancia emulada de un examen.
        var examenEmulado = db.Examen.build({
            id: examenCreated.id
        });
        return examenEmulado.getPreguntas();
    }).then(function(preguntas) {
        console.log(preguntas.toString());
    });

}
